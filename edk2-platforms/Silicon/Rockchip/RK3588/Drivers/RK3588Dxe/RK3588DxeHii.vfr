/** @file
 *
 *  Copyright (c) 2018 Andrei Warkentin <andrey.warkentin@gmail.com>
 *  Copyright (c) 2020, ARM Limited. All rights reserved.
 *  Copyright (c) 2023, Mario Bălănică <mariobalanica02@gmail.com>
 *
 *  SPDX-License-Identifier: BSD-2-Clause-Patent
 *
 **/

#include <Guid/HiiPlatformSetupFormset.h>
#include <VarStoreData.h>

#include "RK3588DxeFormSetGuid.h"

#define VFR_FILE_INCLUDE
#include "CpuPerformance.h"

//
// EFI Variable attributes
//
#define EFI_VARIABLE_NON_VOLATILE       0x00000001
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 0x00000002
#define EFI_VARIABLE_RUNTIME_ACCESS     0x00000004
#define EFI_VARIABLE_READ_ONLY          0x00000008

formset
    guid      = RK3588DXE_FORMSET_GUID,
    title     = STRING_TOKEN(STR_FORM_SET_TITLE),
    help      = STRING_TOKEN(STR_FORM_SET_TITLE_HELP),
    classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,

    efivarstore CPU_PERF_CLUSTER_CLOCK_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterClockPreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterClockCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterClockPreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterClockCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterClockPreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterClockCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterVoltageMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterVoltageCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterVoltageMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterVoltageCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterVoltageMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterVoltageCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    form formid = 1,
      title  = STRING_TOKEN(STR_FORM_SET_TITLE);
      subtitle text = STRING_TOKEN(STR_FORM_SET_TITLE_SUBTITLE);
      
      subtitle text = STRING_TOKEN(STR_NULL_STRING);

      goto 0x1000,
        prompt = STRING_TOKEN(STR_CPU_PERF_FORM_TITLE),
        help = STRING_TOKEN(STR_CPU_PERF_FORM_HELP);
    endform;

    form formid = 0x1000,
        title  = STRING_TOKEN(STR_CPU_PERF_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCKS_SUBTITLE);

        oneof varid = CpuPerf_CPULClusterClockPreset.Preset,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_PRESET_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_PRESET_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEF), value = CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MIN), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MIN, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MAX), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MAX, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM), value = CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPULClusterClockPreset.Preset == CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM;
          oneof varid = CpuPerf_CPULClusterClockCustom.Mhz,
            prompt      = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_CUSTOM_PROMPT),
            help        = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_CUSTOM_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_600), value = 600, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_816), value = 816, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1800), value = 1800, flags = DEFAULT;
          endoneof;
        endif;

        oneof varid = CpuPerf_CPUB01ClusterClockPreset.Preset,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_CLOCK_PRESET_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_PRESET_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEF), value = CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MIN), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MIN, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MAX), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MAX, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM), value = CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB01ClusterClockPreset.Preset == CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM;
          oneof varid = CpuPerf_CPUB01ClusterClockCustom.Mhz,
            prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_CLOCK_CUSTOM_PROMPT),
            help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_CUSTOM_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_600), value = 600, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_816), value = 816, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1800), value = 1800, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2016), value = 2016, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2208), value = 2208, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2256), value = 2256, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2304), value = 2304, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2352), value = 2352, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2400), value = 2400, flags = DEFAULT;
          endoneof;
        endif;

        oneof varid = CpuPerf_CPUB23ClusterClockPreset.Preset,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_CLOCK_PRESET_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_PRESET_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEF), value = CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MIN), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MIN, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MAX), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MAX, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM), value = CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB23ClusterClockPreset.Preset == CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM;
          oneof varid = CpuPerf_CPUB23ClusterClockCustom.Mhz,
            prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_CLOCK_CUSTOM_PROMPT),
            help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_CUSTOM_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_600), value = 600, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_816), value = 816, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1800), value = 1800, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2016), value = 2016, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2208), value = 2208, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2256), value = 2256, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2304), value = 2304, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2352), value = 2352, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2400), value = 2400, flags = DEFAULT;
          endoneof;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGES_SUBTITLE);

        oneof varid = CpuPerf_CPULClusterVoltageMode.Mode,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPULClusterVoltageMode.Mode == CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM;
          numeric varid = CpuPerf_CPULClusterVoltageCustom.Microvolts,
            prompt  = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_CUSTOM_PROMPT),
            help    = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_CUSTOM_HELP),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = CLUSTER_MICROVOLTS_MIN,
            maximum = CLUSTER_MICROVOLTS_MAX,
            step = CLUSTER_MICROVOLTS_STEP,
            default = CPUL_CLUSTER_MICROVOLTS_DEFAULT,
          endnumeric;
        endif;

        oneof varid = CpuPerf_CPUB01ClusterVoltageMode.Mode,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_VOLTAGE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB01ClusterVoltageMode.Mode == CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM;
          numeric varid = CpuPerf_CPUB01ClusterVoltageCustom.Microvolts,
            prompt  = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_VOLTAGE_CUSTOM_PROMPT),
            help    = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_CUSTOM_HELP),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = CLUSTER_MICROVOLTS_MIN,
            maximum = CLUSTER_MICROVOLTS_MAX,
            step = CLUSTER_MICROVOLTS_STEP,
            default = CPUB_CLUSTER_MICROVOLTS_DEFAULT,
          endnumeric;
        endif;

        oneof varid = CpuPerf_CPUB23ClusterVoltageMode.Mode,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_VOLTAGE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB23ClusterVoltageMode.Mode == CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM;
          numeric varid = CpuPerf_CPUB23ClusterVoltageCustom.Microvolts,
            prompt  = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_VOLTAGE_CUSTOM_PROMPT),
            help    = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_CUSTOM_HELP),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = CLUSTER_MICROVOLTS_MIN,
            maximum = CLUSTER_MICROVOLTS_MAX,
            step = CLUSTER_MICROVOLTS_STEP,
            default = CPUB_CLUSTER_MICROVOLTS_DEFAULT,
          endnumeric;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_CPU_PERF_FORM_SUBTITLE);
    endform;
endformset;
